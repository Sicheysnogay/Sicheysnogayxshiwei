-- shiwei-v1.2_obf.lua
-- Base64-only obfuscated loader (no key). Decodes payload and executes.
local b64 = [[]]

local function b64dec(data)
    local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='',0
        for i=1,64 do if string.sub(b,i,i) == x then f = i-1; break end end
        local bin = ''
        for i=6,1,-1 do
            bin = bin .. (math.floor(f / 2^(i-1)) % 2)
        end
        return bin
    end):gsub('%d%d%d%d%d%d%d%d', function(x)
        local c=0
        for i=1,8 do c = c + (tonumber(string.sub(x,i,i)) * 2^(8-i)) end
        return string.char(c)
    end))
end

local ok, decoded = pcall(b64dec, b64)
if not ok or type(decoded) ~= 'string' then
    error('Failed to decode payload')
end

local f, err = loadstring(decoded)
if not f then
    error('Loadstring error: '..tostring(err))
end
pcall(f)
